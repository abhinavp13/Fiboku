package com.pabhinav.fiboku.activities;

import android.app.LoaderManager;
import android.content.CursorLoader;
import android.content.Loader;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.design.widget.Snackbar;
import android.view.View;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.pabhinav.fiboku.R;
import com.pabhinav.fiboku.adapter.ConnectionsAdapter;
import com.pabhinav.fiboku.adapter.UploadedBookAdapter;
import com.pabhinav.fiboku.contentprovider.UploadedBookProvider;
import com.pabhinav.fiboku.db.UploadedBookTable;
import com.pabhinav.fiboku.util.Constants;
import com.pabhinav.fiboku.util.NetworkUtil;

import java.util.zip.GZIPOutputStream;

/**
 * Activity displaying uploaded books by user
 *
 * @author pabhinav
 */
public class UploadedBookActivity extends BaseAbstractActivity implements LoaderManager.LoaderCallbacks<Cursor> {

    /**
     * uploaded book displaying list view
     */
    ListView uploadedBookListView;

    /**
     * Adapter for above list view
     */
    UploadedBookAdapter uploadedBookAdapter;

    /**
     * loading text view
     */
    TextView loadingTextView;

    /**
     * nothing found text view.
     */
    TextView nothingFoundTextView;

    /**
     * main relative layout for this activity
     */
    RelativeLayout mainRelativeLayout;

    /**
     * Called when the activity is starting.
     *
     * <p>This activity extends {@link BaseAbstractActivity}, an abstract activity,
     * which mainly handles permissions grant and navigation drawer related events. </p>
     *
     * <p>Need to call {@link BaseAbstractActivity#setContentViewAndId(int, int)}, instead
     * of {@link android.support.v7.app.AppCompatActivity#setContentView(int)}, because
     * the abstract activity handles all layout inflation by itself, when setContentViewAndId
     * is called with a constant Activity Id for each Activity.</p>
     *
     * @param savedInstanceState If the activity is being re-initialized after
     *     previously being shut down then this Bundle contains the data it most
     *     recently supplied in {@link #onSaveInstanceState}.
     */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentViewAndId(R.layout.activity_uploaded_book, Constants.uploadedBooksActivity);

        loadingTextView = (TextView) findViewById(R.id.loading_text_view);
        nothingFoundTextView = (TextView) findViewById(R.id.nothing_found_text_view);
        mainRelativeLayout = (RelativeLayout) findViewById(R.id.root_container_relative_layout_uploaded_book);

        uploadedBookListView = (ListView) findViewById(R.id.uploaded_book_list_view);

        /** Show finding.... symbol **/
        if (!NetworkUtil.isNetworkConnected(this)) {
            Snackbar.make(mainRelativeLayout, getString(R.string.no_internet_connection), Snackbar.LENGTH_LONG).show();
        } else {

            loadingTextView.setVisibility(View.VISIBLE);
            nothingFoundTextView.setVisibility(View.GONE);

            /** Loader initialize **/
            getLoaderManager().initLoader(1, null, this);
        }
    }

    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
        return new CursorLoader(
                this,
                UploadedBookProvider.CONTENT_URI,
                null,
                null,
                null,
                UploadedBookTable.KEY_BOOK_UPLOAD_TIMESTAMP + getString(R.string.desc)
        );
    }

    /**
     * Called when a previously created loader has finished its load.
     *
     * <p>This function is guaranteed to be called prior to the release of
     * the last data that was supplied for this Loader. The Loader will take care of
     * management of its data so you don't have to.
     *
     *
     * @param loader The Loader that has finished.
     * @param data The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
        if(data.getCount() == 0) {
            nothingFoundTextView.setVisibility(View.VISIBLE);
            loadingTextView.setVisibility(View.GONE);
        } else {
            nothingFoundTextView.setVisibility(View.GONE);
            loadingTextView.setVisibility(View.GONE);
        }
        data.moveToFirst();
        uploadedBookAdapter = new UploadedBookAdapter(this, data, R.layout.uploaded_book_list_view_item);
        uploadedBookListView.setAdapter(uploadedBookAdapter);
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<Cursor> loader) {}
}
