package com.pabhinav.fiboku.activities;

import android.app.LoaderManager;
import android.content.CursorLoader;
import android.content.Loader;
import android.database.Cursor;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.firebase.client.FirebaseError;
import com.pabhinav.fiboku.R;
import com.pabhinav.fiboku.adapter.FindBookInFriendAdapter;
import com.pabhinav.fiboku.application.FibokuApplication;
import com.pabhinav.fiboku.firebase.FindBookFirebaseHelper;
import com.pabhinav.fiboku.firebase.RPNFirebaseHelper;
import com.pabhinav.fiboku.models.FindBookMetaData;
import com.pabhinav.fiboku.util.BundleUtil;
import com.pabhinav.fiboku.util.Constants;
import com.pabhinav.fiboku.util.FLog;
import com.pabhinav.fiboku.util.NetworkUtil;

import java.util.ArrayList;
import java.util.List;

/**
 * This activity searches for a given book in all friend's that user has.
 * Even in friend's friend's list too.
 *
 * @author pabhinav
 */
public class FindBookInFriendActivity extends AppCompatActivity implements LoaderManager.LoaderCallbacks<Cursor> {

    /**
     * The book to be searched for
     */
    String lookupBook;

    /**
     * List view for displaying friend's name who has the book
     */
    ListView findBookInFriendListView;

    /**
     * Adapter for above list view.
     */
    FindBookInFriendAdapter findBookInFriendAdapter;

    /**
     * Loading text view shown when loading of data is going on in background.
     */
    TextView loadingTextView;

    /**
     * Nothing found text view shown when no data is found.
     */
    TextView nothingFoundTextView;

    /**
     * Main relative layout for this activity.
     */
    RelativeLayout mainRelativeLayout;

    /**
     * Called when the activity is starting.
     *
     * @param savedInstanceState If the activity is being re-initialized after
     *     previously being shut down then this Bundle contains the data it most
     *     recently supplied in {@link #onSaveInstanceState}.
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_find_book_in_friend);

        /**
         * Initialize views.
         */
        loadingTextView = (TextView) findViewById(R.id.loading_text_view);
        nothingFoundTextView = (TextView) findViewById(R.id.nothing_found_text_view);
        mainRelativeLayout = (RelativeLayout) findViewById(R.id.root_container_relative_layout);
        lookupBook = BundleUtil.getStringFromBundle(savedInstanceState, getIntent().getExtras(), Constants.SEARCHED_BOOK_TITLE, "");
        findBookInFriendListView = (ListView) findViewById(R.id.friend_list_view);

        /**
         * If internet connectivity present, show loading icon and start
         * loading data, else, show no internet connection snack bar.
         */
        if (!NetworkUtil.isNetworkConnected(this)) {
            Snackbar.make(mainRelativeLayout, getString(R.string.no_internet_connection), Snackbar.LENGTH_LONG).show();
        } else {

            loadingTextView.setVisibility(View.VISIBLE);
            nothingFoundTextView.setVisibility(View.GONE);

            /** Loader initialize **/
            getLoaderManager().initLoader(2, null, this);
        }
    }

    @Override
    public void onSaveInstanceState(Bundle outState){
        super.onSaveInstanceState(outState);
        outState.putString(Constants.SEARCHED_BOOK_TITLE, lookupBook);
    }

    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
        /** the cursor loader **/
        return new CursorLoader(
                this,
                ContactsContract.CommonDataKinds.Phone.CONTENT_URI,
                null,
                null,
                null,
                ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME + getString(R.string.asc)
        );
    }

    /**
     * Called when a previously created loader has finished its load.
     *
     * <p>This function is guaranteed to be called prior to the release of
     * the last data that was supplied for this Loader. The Loader will take care of
     * management of its data so you don't have to.
     *
     *
     * @param loader The Loader that has finished.
     * @param data The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
        if(data.getCount() == 0){
            nothingFoundTextView.setVisibility(View.VISIBLE);
            loadingTextView.setVisibility(View.GONE);
        } else {
            loadingTextView.setVisibility(View.GONE);
            nothingFoundTextView.setVisibility(View.GONE);
        }
        data.moveToFirst();
        getDataFromFirebase(data);
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<Cursor> loader) {}

    /**
     * Fetches rpn data from firebase,
     * only authenticated user can do this, and can only read those rpns
     * which are in his connections.
     *
     * @param data cursor for loaded connections
     */
    public void getDataFromFirebase(final Cursor data){

        RPNFirebaseHelper rpnFirebaseHelper = new RPNFirebaseHelper();

        /**
         * Fetch list of rpns
         */
        rpnFirebaseHelper.fetchListOfRPN();
        rpnFirebaseHelper.setRpnEvents(new RPNFirebaseHelper.RPNEvents() {
            @Override
            public void onRPNFetched(List<String> rpnList, FirebaseError firebaseError) {

                ArrayList<String> rpnData = new ArrayList<String>();
                if(firebaseError == null){
                    rpnData = new ArrayList<>(rpnList);
                }

                final ArrayList<FindBookMetaData> findBookMetaDataArrayList = createFindBookMetaDataList(data, rpnData);
                final FindBookFirebaseHelper findBookFirebaseHelper = new FindBookFirebaseHelper();

                /**
                 * Need to fetch list of all meta data for books.
                 */
                findBookFirebaseHelper.completeFindBookMetaDataList(findBookMetaDataArrayList);
                findBookFirebaseHelper.setFindBookFirebaseEvents(new FindBookFirebaseHelper.FindBookFirebaseEvents() {
                    @Override
                    public void onAllFindBookMetaDataFetched(ArrayList<FindBookMetaData> findBookMetaDatum) {
                        FLog.d(this, findBookMetaDatum.toString());

                        final ArrayList<FindBookMetaData> adapterList = new ArrayList<FindBookMetaData>();

                        findBookFirebaseHelper.setFindBookFirebaseCompletionEvents(new FindBookFirebaseHelper.FindBookFirebaseCompletionEvents() {
                            @Override
                            public void onSearchComplete(boolean isSuccessful, FindBookMetaData findBookMetaData) {
                                if(isSuccessful) {
                                    adapterList.add(findBookMetaData);
                                    if(findBookInFriendAdapter == null){

                                        /**
                                         * Initialize connections adapter, since data is now available for it.
                                         */
                                        findBookInFriendAdapter = new FindBookInFriendAdapter(FindBookInFriendActivity.this, adapterList, R.layout.find_book_in_friend_view_item, lookupBook);
                                        /**
                                         * Update the list view with the adapter.
                                         */
                                        findBookInFriendListView.setAdapter(findBookInFriendAdapter);
                                    } else {

                                        /**
                                         * update adapter
                                         */
                                        findBookInFriendAdapter.updateAll(adapterList);
                                    }
                                }
                            }
                        });

                        /**
                         * For each meta book data, find look up book.
                         */
                        for (FindBookMetaData findBookMetaData: findBookMetaDatum) {
                            findBookFirebaseHelper.findBook(lookupBook, findBookMetaData);
                        }

                    }
                });
            }
        });
    }

    /**
     * Create {@link FindBookMetaData} domain object.</br>
     * Requires cursor data and list of rpns.
     *
     * @param data {@link Cursor} object.
     * @param rpnData list of rpn strings
     * @return list of {@link FindBookMetaData} objects.
     */
    private ArrayList<FindBookMetaData> createFindBookMetaDataList(Cursor data, ArrayList<String> rpnData){
        
        ArrayList<FindBookMetaData> findBookMetaDataArrayList = new ArrayList<>();
        while(data.moveToNext()){
            String pN = data.getString(data.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));

            if (rpnData.contains(pN)
                    || (pN.length() > 3 && rpnData.contains(pN.substring(3)))) {

                /**
                 * If phone number is current user's only, leave it
                 */
                String myNumber = FibokuApplication.getInstance().getPhoneNumber();
                if(myNumber.equals(pN)
                        || (pN.length() > 3 && myNumber.equals(pN.substring(3)))){
                    continue;
                }

                FindBookMetaData findBookInFriend = new FindBookMetaData.FindBookMetaDataBuilder()
                        .addName(data.getString(data.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME)))
                        .addPhoneNumber(data.getString(data.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER)))
                        .build();

                findBookMetaDataArrayList.add(findBookInFriend);
            }
        }
        return findBookMetaDataArrayList;
    }

    /**
     * Back icon pressed by user.
     *
     * @param v view of the back icon.
     */
    public void backClicked(View v){
        super.onBackPressed();
    }
}
