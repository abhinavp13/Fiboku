apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.jakewharton.hugo'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"
    def DATABASE_VERSION = '"' + "1" + '"';
    def DATABASE_NAME = '"' + "FibokuDB" + '"';

    signingConfigs {
        myConfig {
            storeFile file("keystore.jks")
            storePassword "nanopass"
            keyAlias "fibokuKey"
            keyPassword "nanopass"
        }
    }

    defaultConfig {
        applicationId "com.pabhinav.fiboku"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE-FIREBASE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
    }
    buildTypes {
        debug{
            minifyEnabled false
        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.myConfig
        }
    }

    def FIREBASE_DASHBOARD_LINK = '"' + FirebaseDashboardLink + '"' ?: '"Define your Firebase dashboard link"';
    def TWITTER_KEY = '"' + TwitterKey + '"' ?: '"Define your twitter key"'
    def TWITTER_SECRET = '"' + TwitterSecret + '"' ?: '"Define your twitter secret"'
    def GOOGLE_BOOK_KEY = '"' + GoogleBookKey + '"' ?: '"Define your google book key"'

    android.buildTypes.each { type ->
        ;
        type.buildConfigField('String', 'FIREBASE_DASHBOARD_LINK', FIREBASE_DASHBOARD_LINK);
        type.buildConfigField('String', 'TWITTER_KEY', TWITTER_KEY);
        type.buildConfigField('String', 'TWITTER_SECRET', TWITTER_SECRET);
        type.buildConfigField('String', 'DATABASE_VERSION', DATABASE_VERSION)
        type.buildConfigField('String', 'DATABASE_NAME', DATABASE_NAME)
        type.buildConfigField('String', 'GOOGLE_BOOK_KEY', GOOGLE_BOOK_KEY)
    }
}

dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])

    testCompile 'junit:junit:4.12'

    /** Appcompat library **/
    compile 'com.android.support:appcompat-v7:23.1.1'

    /** Lombok (https://projectlombok.org/features/index.html) **/
    provided 'org.projectlombok:lombok:1.16.6'

    /** Waiting Dots (https://github.com/tajchert/WaitingDots) **/
    compile 'pl.tajchert:waitingdots:0.2.0'

    /** Recycler view **/
    compile 'com.android.support:recyclerview-v7:23.1.1'

    /** Card View **/
    compile 'com.android.support:cardview-v7:23.1.1'

    /** Butterknife (http://jakewharton.github.io/butterknife/) **/
    compile 'com.jakewharton:butterknife:7.0.1'

    /** Picasso (http://square.github.io/picasso/) **/
    compile 'com.squareup.picasso:picasso:2.5.2'

    /** Design Library **/
    compile 'com.android.support:design:23.1.1'

    /** Firebase client library **/
    compile 'com.firebase:firebase-client-android:2.5.0'

    /** FirebaseUI library **/
    compile 'com.firebaseui:firebase-ui:0.3.1'

    /** Google auth sdk **/
    compile 'com.google.android.gms:play-services-auth:8.4.0'

    /** ACRA crash reporting library **/
    compile 'ch.acra:acra:4.6.2'

    /** Google Analytics **/
    compile 'com.google.android.gms:play-services-analytics:8.4.0'

    /** Twitter digits for phone number verification **/
    compile('com.digits.sdk.android:digits:1.10.1@aar') {
        transitive = true;
    }

    /** Circular Image view **/
    compile 'com.mikhaellopez:circularimageview:3.0.2'

    /** Barcode scanning library **/
    compile 'me.dm7.barcodescanner:zxing:1.8.4'

    /** Ad Mob **/
    compile 'com.google.android.gms:play-services-ads:8.4.0'
}

